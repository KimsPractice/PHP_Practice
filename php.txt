PHP의 특성

	장점

	1. WEB에 입문하기에 가장 강력한 언어이다.
	2. 타 언어보다 배우기가 쉽다.
	3. WEB HOSTING서비스를 이용할 시 기본적으로 제공해주기 때문에 환경설정에 용이하다.

	단점

	1. WEB을 위한 언어이기 때문에 다른서비스를 위해 사용하기에는 부적절하다.
	2. 불특정다수에 의해 개발되어 왔기때문에 예측가능성이 낮다.


서버 사이드 스크립트를 사용하는 이유

	 기존의 웹페이지는 HTML, HTTP, URI(URL) 로 구성되어 정적인 정보를 전달하는 용도로 사용되어왔다.
	그러나 인터넷과 웹의 성장으로 무수히 많은 사용자와 그에 의한 정보 그리고 그에 따른 서비스를 위한 페이지의 효율적인 관리를 위해 생겨난 것이 CGI이다.
	 	CGI란 공통 게이트웨이 인터페이스(common gateway interface)의 약어로, 웹서버와 외부 프로그램	사이에서 정보를 주고 받는 방법이나 규약들을 말한다.
	 CGI를 통해 PHP, PYTHON, PERL 등의 서버 사이드 스크립트를 사용하여 기존의 수작업으로 처리하기 힘들었던 무수히 많은 페이지 혹은 서비스를 효율적으로 관리 할 수 있게된다.

데이터 타입
	말그대로 데이터의 타입을 말한다. 크게 숫자와 문자로 구분하며 숫자의 경우 INTEGER:정수, FLOAT:실수 등이 있고, 문자열은 String가 있다. 그 외에도 변수($), boolean, array 등 다양한 데이터 타입이 있다.

형 변환이 필요한 이유
	무수히 많은 변수를 사용함에 따라 그 변수의 데이터를 특정 지을 수 없는 상황이 펼쳐질 수도 있다.
	특정 지을 수 없는 변수에 대한 데이터 처리를 하고자 할 때 데이터의 타입을 알아내고, 하고자하는 데이터 처리에 알맞은 데이터로 변환하여 사용할 수 있기 떄문이다.

연산자
	연산자랑 컴퓨터에게 어떠한 작업을 지시하기 위해 사용하는 기호들을 말한다.

입출력 과 form
	PHP 에서는 GET방식과 POST방식의 데이터 입출력 방식이 있다. GET방식은 브라우저의 주소창을 이용하여 INDEX를 통해 값을 받아오고, POST방식은 HTML의 FORM을 이용하여 다른사용자들에게 노출되지 않게 즉 보안에 조금더 용이하게 전송할 수 있다.

	form은 입력받을 수 있는 공간을 만들어주는 html의 태그이다.

조건문
	조건문이란 주어진 조건에 따라 어플리케이션을 다르게 동작하도록 하는것이다.

논리 연산자
  조건문을 더 간결하고 다양하게 구사할 수 있게 한다. and, or, not이 있으며, and 는 좌항과 우항 모두 true 일때 참이 되고, && 로 사용하기도 한다. or는 좌항과 우항 중 하나만 true 이어도 참이 되며 둘다 false일때 거짓이 된다. ||로 사용하기도 한다. not은 조건의 반대가 조건이 된다.
	not true이면 false이고 not false이면 true가 된다. !로 사용하기도 한다.

반복문
	반복문이란 말그대로 같은내용의 어떠한 동작을 반복시킬때 사용한다. while문과 for문이 있으며, 반복 중간 어떠한 조건에 중단시키고 싶을때는 break를 사용하고, 어떠한 조건만을 제외할땐 continue를 사용한다.

함수 (function)
	함수란 정의와 호출을 사용하여 코드의 재활용을 가능하게 하며, 함수를 호출할때는 '함수이름();'로 호출한다. return 으로 반환값을 지정할 수 있다.

지역/전역변수
	지역변수란 말그대로 어떠한 함수에서만 사용가능한 변수를 말한다. 그외 반대로 전역변수는 특정 함수뿐만아니라 php전체에서 사용가능한 변수를 말한다.

배열 (array)
	배열이란 어떠한 변수에 여러개의 값을 넣을떄 사용한다. 배열에 들어간 데이터는 각각 인덱스가 지정되고, 그 인덱스로 해당 데이터를 제어할 수 있다.

연관 배열(associative array)
	기존의 배열은 인덱스를 통하여 그 데이터를 식별하고 제어한다. 연관 배열은 인덱스를 특정 문자열로 지정하여 문자열을 통해 그 데이터를 식별하고 제어할 수 있다.

include / require
	필요에 따라 타 PHP의 파일을 현재PHP파일로 로드하여 사용할 수 있게 한다.

Namespace
	PHP에서 다양한 함수, 상수, 클래스 등에 의해 중복된 이름으로 인한 충돌에 대한 문제를 해결하기 위해 사용되는 디렉토리와 같은 개념으로 이해할 수 있다.
